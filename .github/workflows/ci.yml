#on:
#  push:
#    branches:
#      - main
#      - master
#    tags:
#      - "*"
#  pull_request:
#  workflow_dispatch:
#
#permissions:
#  contents: read
#
#jobs:
#  linux:
#    runs-on: ubuntu-22.04
#    strategy:
#      matrix:
#        target: [x86_64, x86, aarch64, armv7] #s390x, ppc64le] # maybe add these back later can't bc of oxi-png + libdeflate?
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.10"
#      - name: Build wheels
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.target }}
#          args: --release --out dist --find-interpreter
#          sccache: "true"
#          manylinux: auto
#          working-directory: ./utiles-pyo3
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-linux-${{ matrix.target }}
#          path: utiles-pyo3/dist
#      - name: pytest
#        if: ${{ startsWith(matrix.target, 'x86_64') }}
#        shell: bash
#        run: |
#          set -e
#          cd utiles-pyo3
#          pip install click
#          pip install utiles --no-index --no-deps --find-links dist --force-reinstall
#          pip install -r requirements/dev.txt
#          pytest --benchmark-disable
#
#  windows:
#    runs-on: windows-latest
#    strategy:
#      matrix:
#        target: [x64, x86]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.10"
#          architecture: ${{ matrix.target }}
#      - name: Build wheels
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.target }}
#          args: --release --out dist --find-interpreter
#          sccache: "true"
#          working-directory: ./utiles-pyo3
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-windows-${{ matrix.target }}
#          path: utiles-pyo3/dist
#      - name: pytest
#        if: ${{ !startsWith(matrix.target, 'aarch64') }}
#        shell: bash
#        run: |
#          set -e
#          cd utiles-pyo3
#          pip install click
#          pip install utiles --no-index --no-deps --find-links dist --force-reinstall
#          pip install -r requirements/dev.txt
#          pytest --benchmark-disable
#  macos:
#    runs-on: macos-latest
#    strategy:
#      matrix:
#        target: [x86_64, aarch64]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.10"
#      - name: Build wheels
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.target }}
#          args: --release --out dist --find-interpreter
#          sccache: "true"
#          working-directory: ./utiles-pyo3
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-macos-${{ matrix.target }}
#          path: utiles-pyo3/dist
#
#      # TODO: Figure out why pytest is not working on macos
#      # - name: pytest
#      #   if: ${{ !startsWith(matrix.target, 'aarch64') }}
#      #   shell: bash
#      #   run: |
#      #     set -e
#      #     cd utiles-pyo3
#      #     pip install click
#      #     pip install utiles --no-index --no-deps --find-links dist --force-reinstall
#      #     pip install -r requirements/dev.txt
#      #     pytest --benchmark-disable
#
#  sdist:
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v4
#      - name: Build sdist
#        uses: PyO3/maturin-action@v1
#        with:
#          command: sdist
#          args: --out dist
#          working-directory: ./utiles-pyo3
#      - name: Upload sdist
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-sdist
#          path: utiles-pyo3/dist
#
#  release:
#    name: Release
#    runs-on: ubuntu-22.04
#    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [linux, windows, macos, sdist]
#    steps:
#      - uses: actions/download-artifact@v4
#      - name: list builds
#        run: |
#          ls -l
#      - name: Publish to PyPI
#        uses: PyO3/maturin-action@v1
#        env:
#          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
#        with:
#          command: upload
#          args: --skip-existing --non-interactive wheels-*/*
# This file is autogenerated by maturin v1.7.4
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          working-directory: ./utiles-pyo3
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist
  
  #      - name: Build wheels
  #        uses: PyO3/maturin-action@v1
  #        with:
  #          target: ${{ matrix.target }}
  #          args: --release --out dist --find-interpreter
  #          sccache: "true"
  #          manylinux: auto
  #          working-directory: ./utiles-pyo3
  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: musllinux_1_2
          working-directory: ./utiles-pyo3
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist
#
#  windows:
#    runs-on: ${{ matrix.platform.runner }}
#    strategy:
#      matrix:
#        platform:
#          - runner: windows-latest
#            target: x64
#          - runner: windows-latest
#            target: x86
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: 3.x
#          architecture: ${{ matrix.platform.target }}
#      - name: Build wheels
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.platform.target }}
#          args: --release --out dist --find-interpreter
#          sccache: 'true'
#          working-directory: ./utiles-pyo3
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-windows-${{ matrix.platform.target }}
#          path: dist
#
#  macos:
#    runs-on: ${{ matrix.platform.runner }}
#    strategy:
#      matrix:
#        platform:
#          - runner: macos-12
#            target: x86_64
#          - runner: macos-14
#            target: aarch64
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: 3.x
#      - name: Build wheels
#        uses: PyO3/maturin-action@v1
#        with:
#          target: ${{ matrix.platform.target }}
#          args: --release --out dist --find-interpreter
#          sccache: 'true'
#          working-directory: ./utiles-pyo3
#      - name: Upload wheels
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-macos-${{ matrix.platform.target }}
#          path: dist
#
#  sdist:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Build sdist
#        uses: PyO3/maturin-action@v1
#        with:
#          command: sdist
#          args: --out dist
#          working-directory: ./utiles-pyo3
#      - name: Upload sdist
#        uses: actions/upload-artifact@v4
#        with:
#          name: wheels-sdist
#          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [ linux, musllinux, windows, macos, sdist ]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
#  release:
#    name: Release
#    runs-on: ubuntu-22.04
#    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [linux, windows, macos, sdist]
#    steps:
#      - uses: actions/download-artifact@v4
#      - name: list builds
#        run: |
#          ls -l
#      - name: Publish to PyPI
#        uses: PyO3/maturin-action@v1
#        env:
#          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
#        with:
#          command: upload
#          args: --skip-existing --non-interactive wheels-*/*
